{"version":3,"sources":["components/Stats.js","components/Publications.js","App.js","serviceWorker.js","index.js"],"names":["Stats","useState","server1RamMetrics","setServer1RamMetrics","server2RamMetrics","setServer2RamMetrics","server1CpuMetrics","setServer1CpuMetrics","server2CpuMetrics","setServer2CpuMetrics","getServer1Data","fetch","then","results","json","prevState","length","tmp","i","parseInt","ram","push","cpu","catch","err","console","log","getServer2Data","useEffect","setInterval","ramData","React","useMemo","label","data","ramAxes","primary","type","position","hardMin","hardMax","show","ramChart","style","width","height","axes","cpuData","cpuAxes","cpuChart","Row","className","Col","sm","color","Publications","props","state","value","publications","handleChange","bind","getServerAData","getServerBData","newPublications","map","result","key","date","Card","Body","Title","author","Subtitle","Text","sentence","setState","event","this","target","Container","onChange","Component","App","Navbar","bg","variant","Brand","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.278c13d3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * React Charts\r\n */\r\nimport { Chart } from \"react-charts\";\r\n\r\n/**\r\n * Bootstrap\r\n */\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction Stats() {\r\n  const [server1RamMetrics, setServer1RamMetrics] = useState([]);\r\n  const [server2RamMetrics, setServer2RamMetrics] = useState([]);\r\n  const [server1CpuMetrics, setServer1CpuMetrics] = useState([]);\r\n  const [server2CpuMetrics, setServer2CpuMetrics] = useState([]);\r\n\r\n  /**\r\n   * Getting data from API\r\n   */\r\n  function getServer1Data() {\r\n    fetch(\"http://3.16.162.166:5000/usage\")\r\n      .then((results) => results.json())\r\n      .then((results) => {\r\n        setServer1RamMetrics((prevState) => {\r\n          if (prevState.length > 0) {\r\n            const tmp = [...prevState];\r\n            if (prevState.length === 10) {\r\n              for (let i = 0; i < tmp.length - 1; i++) {\r\n                tmp[i][1] = tmp[i + 1][1];\r\n              }\r\n              tmp[9] = [9, parseInt(results.ram)];\r\n            } else {\r\n              tmp.push([tmp.length, parseInt(results.ram)]);\r\n            }\r\n            return tmp;\r\n          } else {\r\n            return [[0, parseInt(results.ram)]];\r\n          }\r\n        });\r\n        setServer1CpuMetrics((prevState) => {\r\n          if (prevState.length > 0) {\r\n            const tmp = [...prevState];\r\n            if (prevState.length === 10) {\r\n              for (let i = 0; i < tmp.length - 1; i++) {\r\n                tmp[i][1] = tmp[i + 1][1];\r\n              }\r\n              tmp[9] = [9, parseInt(results.cpu)];\r\n            } else {\r\n              tmp.push([tmp.length, parseInt(results.cpu)]);\r\n            }\r\n            return tmp;\r\n          } else {\r\n            return [[0, parseInt(results.cpu)]];\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  function getServer2Data() {\r\n    fetch(\"http://3.14.28.178:5000/usage\")\r\n      .then((results) => results.json())\r\n      .then((results) => {\r\n        setServer2RamMetrics((prevState) => {\r\n          if (prevState.length > 0) {\r\n            const tmp = [...prevState];\r\n            if (prevState.length === 10) {\r\n              for (let i = 0; i < tmp.length - 1; i++) {\r\n                tmp[i][1] = tmp[i + 1][1];\r\n              }\r\n              tmp[9] = [9, parseInt(results.ram)];\r\n            } else {\r\n              tmp.push([tmp.length, parseInt(results.ram)]);\r\n            }\r\n            return tmp;\r\n          } else {\r\n            return [[0, parseInt(results.ram)]];\r\n          }\r\n        });\r\n        setServer2CpuMetrics((prevState) => {\r\n          if (prevState.length > 0) {\r\n            const tmp = [...prevState];\r\n            if (prevState.length === 10) {\r\n              for (let i = 0; i < tmp.length - 1; i++) {\r\n                tmp[i][1] = tmp[i + 1][1];\r\n              }\r\n              tmp[9] = [9, parseInt(results.cpu)];\r\n            } else {\r\n              tmp.push([tmp.length, parseInt(results.cpu)]);\r\n            }\r\n            return tmp;\r\n          } else {\r\n            return [[0, parseInt(results.cpu)]];\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  /**\r\n   * Start setup\r\n   */\r\n  useEffect(() => {\r\n    getServer1Data();\r\n    getServer2Data();\r\n    setInterval(getServer1Data, 1000);\r\n    setInterval(getServer2Data, 1000);\r\n  }, []);\r\n\r\n  /**\r\n   * RAM Graph\r\n   */\r\n  const ramData = React.useMemo(\r\n    () => [\r\n      {\r\n        label: \"Series 1\",\r\n        data: server1RamMetrics,\r\n      },\r\n      {\r\n        label: \"Series 2\",\r\n        data: server2RamMetrics,\r\n      },\r\n    ],\r\n    [server1RamMetrics, server2RamMetrics]\r\n  );\r\n  const ramAxes = React.useMemo(\r\n    () => [\r\n      {\r\n        primary: true,\r\n        type: \"linear\",\r\n        position: \"bottom\",\r\n        hardMin: 0,\r\n        hardMax: 9.1,\r\n        show: false,\r\n      },\r\n      { type: \"linear\", position: \"left\", hardMin: 0, hardMax: 100 },\r\n    ],\r\n    []\r\n  );\r\n  const ramChart = (\r\n    <div\r\n      style={{\r\n        width: \"400px\",\r\n        height: \"300px\",\r\n      }}\r\n    >\r\n      <Chart data={ramData} axes={ramAxes} />\r\n    </div>\r\n  );\r\n\r\n  /**\r\n   *CPU Graph\r\n   */\r\n  const cpuData = React.useMemo(\r\n    () => [\r\n      {\r\n        label: \"Series 1\",\r\n        data: server1CpuMetrics,\r\n      },\r\n      {\r\n        label: \"Series 2\",\r\n        data: server2CpuMetrics,\r\n      },\r\n    ],\r\n    [server1CpuMetrics, server2CpuMetrics]\r\n  );\r\n  const cpuAxes = React.useMemo(\r\n    () => [\r\n      {\r\n        primary: true,\r\n        type: \"linear\",\r\n        position: \"bottom\",\r\n        hardMin: 0,\r\n        hardMax: 9.1,\r\n        show: false,\r\n      },\r\n      { type: \"linear\", position: \"left\", hardMin: 0, hardMax: 100 },\r\n    ],\r\n    []\r\n  );\r\n  const cpuChart = (\r\n    <div\r\n      style={{\r\n        width: \"400px\",\r\n        height: \"300px\",\r\n      }}\r\n    >\r\n      <Chart data={cpuData} axes={cpuAxes} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Row className=\"m-4\">\r\n      <Col sm>\r\n        <h3>RAM</h3>\r\n        <div>{ramChart}</div>\r\n        <p>\r\n          <strong style={{ color: \"#6ab4e9\" }}>Server A:</strong>\r\n          {server1RamMetrics.length > 0 &&\r\n            \" \" + server1RamMetrics[server1RamMetrics.length - 1][1] + \"%\"}\r\n        </p>\r\n        <p>\r\n          <strong style={{ color: \"#e2756c\" }}>Server B:</strong>\r\n          {server2RamMetrics.length > 0 &&\r\n            \" \" + server2RamMetrics[server2RamMetrics.length - 1][1] + \"%\"}\r\n        </p>\r\n      </Col>\r\n      <Col sm>\r\n        <h3>CPU</h3>\r\n        <div>{cpuChart}</div>\r\n        <p>\r\n          <strong style={{ color: \"#6ab4e9\" }}>Server A:</strong>\r\n          {server1CpuMetrics.length > 0 &&\r\n            \" \" + server1CpuMetrics[server1CpuMetrics.length - 1][1] + \"%\"}\r\n        </p>\r\n        <p>\r\n          <strong style={{ color: \"#e2756c\" }}>Server B:</strong>\r\n          {server2CpuMetrics.length > 0 &&\r\n            \" \" + server2CpuMetrics[server2CpuMetrics.length - 1][1] + \"%\"}\r\n        </p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Bootstrap\r\n */\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass Publications extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"ServidorA\", publications: [] };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    this.getServerAData = this.getServerAData.bind(this);\r\n    this.getServerBData = this.getServerBData.bind(this);\r\n  }\r\n\r\n  getServerAData() {\r\n    fetch(\"http://3.16.162.166:5000/sentence\")\r\n      .then((results) => results.json())\r\n      .then((results) => {\r\n        const newPublications = results.map((result) => {\r\n          return (\r\n            <Row className=\"m-2\" key={result.date}>\r\n              <Card style={{ width: \"100%\" }}>\r\n                <Card.Body>\r\n                  <Card.Title>{result.author}</Card.Title>\r\n                  <Card.Subtitle className=\"mb-2 text-muted\">\r\n                    {result.date}\r\n                  </Card.Subtitle>\r\n                  <Card.Text>{result.sentence}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Row>\r\n          );\r\n        });\r\n        this.setState({ publications: newPublications });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  getServerBData() {\r\n    fetch(\"http://3.14.28.178:5000/sentence\")\r\n      .then((results) => results.json())\r\n      .then((results) => {\r\n        const newPublications = results.map((result) => {\r\n          return (\r\n            <Row className=\"m-2\" key={result.date}>\r\n              <Card style={{ width: \"100%\" }}>\r\n                <Card.Body>\r\n                  <Card.Title>{result.author}</Card.Title>\r\n                  <Card.Subtitle className=\"mb-2 text-muted\">\r\n                    {result.date}\r\n                  </Card.Subtitle>\r\n                  <Card.Text>{result.sentence}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Row>\r\n          );\r\n        });\r\n        this.setState({ publications: newPublications });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    if (event.target.value === \"ServidorA\") {\r\n      this.getServerAData();\r\n    } else {\r\n      this.getServerBData();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getServerAData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"m-4\">\r\n        <Container>\r\n          <Row className=\"m-2\">\r\n            {\" \"}\r\n            <h3>Publications</h3>\r\n            <select\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n              className=\"ml-5\"\r\n            >\r\n              <option value=\"ServidorA\">Servidor A</option>\r\n              <option value=\"ServidorB\">Servidor B</option>\r\n            </select>\r\n          </Row>\r\n          {this.state.publications}\r\n        </Container>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Publications;\r\n","import React from \"react\";\n\n/**\n * Bootstrap\n */\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\n\n/**\n * Components\n */\nimport Stats from \"./components/Stats\";\nimport Publications from \"./components/Publications\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>System Info</Navbar.Brand>\n      </Navbar>\n      <Container className=\"mt-4\">\n        <Stats />\n        <Publications />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}